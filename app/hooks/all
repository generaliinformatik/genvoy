#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Generali AG, Rene Fuehrer <rene.fuehrer@generali.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os
import logging
import sys
from sys import stderr
import json
from json import loads
import pymsteams

from hook_functions import replace_all_placeholders, get_reference, flatten_json_text, flatten_json_table_html, flatten_json_table_md


debug_level = "INFO"
logging.basicConfig(stream=stderr, level=logging.INFO)

json_file = sys.argv[1]
event_type = sys.argv[2]
config_file = os.path.dirname(os.path.abspath(__file__)) + '/all.json'

# Load config
with open(config_file, 'r') as cfg:
    config = loads(cfg.read())

debug_level_old = debug_level
debug_level = str(config.get('debug_level', 'INFO'))
if debug_level != debug_level_old:
    if debug_level == "DEBUG":
        logging.getLogger().setLevel(logging.DEBUG)
    elif debug_level == "INFO":
        logging.getLogger().setLevel(logging.INFO)
    elif debug_level == "WARNING":
        logging.getLogger().setLevel(logging.WARNING)
    elif debug_level == "ERROR":
        logging.getLogger().setLevel(logging.ERROR)
    elif debug_level == "CRITICAL":
        logging.getLogger().setLevel(logging.CRITICAL)
    else:
        logging.getLogger().setLevel(logging.INFO)
    logging.info("debug level set dynamically to: %s", debug_level)

logging.debug("%s: config file '%s'", event_type, config_file)

color = replace_all_placeholders("{%s/color}" % (event_type), config, event_type)
logging.debug("%s: config read - 'color': %s", event_type, color)
title = replace_all_placeholders("{%s/title}" % (event_type), config, event_type)
logging.debug("%s: config read - 'title': %s", event_type, title)
message = replace_all_placeholders("{%s/message}" % (event_type), config, event_type)
logging.debug("%s: config read - 'message': %s", event_type, message, event_type)

with open(sys.argv[1], 'r') as jsf:
    payload = json.loads(jsf.read())

title = replace_all_placeholders(title, payload, event_type)
message = replace_all_placeholders(message, payload, event_type)
# replace payload
message = message.replace("{payload_text}", flatten_json_text(payload))
message = message.replace("{payload_table_html}", flatten_json_table_html(payload))
message = message.replace("{payload_table_md}", flatten_json_table_md(payload))

logging.info("%s: sending message to ms teams", event_type)

# escape underscores to be displayed correctly
message = message.replace('_', '\_')

for send_reference in get_reference(config, "webhook", event_type):
    myTeamsMessage = pymsteams.connectorcard(send_reference)
    if color != "":
        myTeamsMessage.color(color)
    if title != "":
        myTeamsMessage.title(title)
    myTeamsMessage.text(message)
    myTeamsMessage.send()
