#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Generali AG, Rene Fuehrer <rene.fuehrer@generali.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os
import logging
import time
import sys
from sys import stderr
import json
from json import loads
import git

from hook_functions import replace_all_placeholders


debug_level = "INFO"
logging.basicConfig(stream=stderr, level=logging.INFO)

json_file = sys.argv[1]
event_type = sys.argv[2]
timestamp = time.strftime("%Y%m%d-%H%M%S")

config_file = os.path.dirname(os.path.abspath(__file__)) + '/'+event_type+'.json'
# Load config
with open(config_file, 'r') as cfg:
    config = loads(cfg.read())

debug_level_old = debug_level
debug_level = str(config.get('debug_level', 'INFO'))
if debug_level != debug_level_old:
    if debug_level == "DEBUG":
        logging.getLogger().setLevel(logging.DEBUG)
    elif debug_level == "INFO":
        logging.getLogger().setLevel(logging.INFO)
    elif debug_level == "WARNING":
        logging.getLogger().setLevel(logging.WARNING)
    elif debug_level == "ERROR":
        logging.getLogger().setLevel(logging.ERROR)
    elif debug_level == "CRITICAL":
        logging.getLogger().setLevel(logging.CRITICAL)
    else:
        logging.getLogger().setLevel(logging.INFO)
    logging.info("debug level set dynamically to: %s", debug_level)

logging.debug("%s: config file '%s'", event_type, config_file)

clone_dir = config.get('clone_dir', "git")
logging.debug("config read - 'clone_dir': %s", event_type, clone_dir)
git_url = config.get('git_url', "{repository/html_url}")
logging.debug("config read - 'git_url': %s", event_type, git_url)

with open(sys.argv[1], 'r') as jsf:
    payload = json.loads(jsf.read())

git_url = replace_all_placeholders(git_url, payload, event_type)

if replace_all_placeholders("{repository/private}", payload, event_type) == False:
    if os.path.isdir(clone_dir):
        clone_dir = clone_dir + '/' + timestamp + '/'
        logging.debug("create dir: %s", git_url)
        os.mkdir(clone_dir)
        git.Git(clone_dir).clone(git_url)
    else:
        logging.error("Abort. Clone base dir not existing (%s)", clone_dir)
else:
        logging.error("Abort. Repository ist private.")
